{"version":3,"sources":["../../../src/api/controllers/invoice.controller.js"],"names":["invoices","_id","item","qty","date","Date","findAll","req","res","next","json","create","schema","Joi","object","string","alphanum","min","max","required","number","due","tax","optional","rate","validateAsync","body","error","value","details","status","Invoice","then","invoice","catch","err"],"mappings":";;;;;;AAAA;;;;AACA;;;;;;AAEA,IAAMA,WAAW,CACf,EAAEC,KAAK,CAAP,EAAUC,MAAM,KAAhB,EAAuBC,KAAK,EAA5B,EAAgCC,MAAM,IAAIC,IAAJ,EAAtC,EADe,EAEf,EAAEJ,KAAK,CAAP,EAAUC,MAAM,MAAhB,EAAwBC,KAAK,CAA7B,EAAgCC,MAAM,IAAIC,IAAJ,EAAtC,EAFe,EAGf,EAAEJ,KAAK,CAAP,EAAUC,MAAM,OAAhB,EAAyBC,KAAK,EAA9B,EAAkCC,MAAM,IAAIC,IAAJ,EAAxC,EAHe,EAIf,EAAEJ,KAAK,CAAP,EAAUC,MAAM,QAAhB,EAA0BC,KAAK,EAA/B,EAAmCC,MAAM,IAAIC,IAAJ,EAAzC,EAJe,EAKf,EAAEJ,KAAK,CAAP,EAAUC,MAAM,SAAhB,EAA2BC,KAAK,EAAhC,EAAoCC,MAAM,IAAIC,IAAJ,EAA1C,EALe,CAAjB;;kBAQe;AACbC,SADa,mBACLC,GADK,EACAC,GADA,EACKC,IADL,EACW;AACtBD,QAAIE,IAAJ,CAASV,QAAT;AACD,GAHY;AAKbW,QALa,kBAKNJ,GALM,EAKDC,GALC,EAKI;AACf,QAAMI,SAASC,cAAIC,MAAJ,CAAW;AACxBZ,YAAMW,cAAIE,MAAJ,GACHC,QADG,GAEHC,GAFG,CAEC,CAFD,EAGHC,GAHG,CAGC,GAHD,EAIHC,QAJG,EADkB;AAMxBhB,WAAKU,cAAIO,MAAJ,GAAaD,QAAb,EANmB;AAOxBf,YAAMS,cAAIT,IAAJ,GAAWe,QAAX,EAPkB;AAQxBE,WAAKR,cAAIT,IAAJ,GAAWe,QAAX,EARmB;AASxBG,WAAKT,cAAIO,MAAJ,GAAaG,QAAb,EATmB;AAUxBC,YAAMX,cAAIO,MAAJ,GAAaG,QAAb;AAVkB,KAAX,CAAf;;AADe,gCAcUX,OAAOa,aAAP,CAAqBlB,IAAImB,IAAzB,EAA+Bd,MAA/B,CAdV;AAAA,QAcPe,KAdO,yBAcPA,KAdO;AAAA,QAcAC,KAdA,yBAcAA,KAdA;;AAef,QAAID,SAASA,MAAME,OAAnB,EAA4B,OAAOrB,IAAIsB,MAAJ,CAAW,GAAX,EAAgBpB,IAAhB,CAAqBiB,KAArB,CAAP;;AAE5BI,sBAAQpB,MAAR,CAAeiB,KAAf,EACGI,IADH,CACQ,mBAAW;AACfxB,UAAIsB,MAAJ,CAAW,GAAX,EAAgBpB,IAAhB,CAAqBuB,OAArB;AACD,KAHH,EAIGC,KAJH,CAIS;AAAA,aAAO1B,IAAIsB,MAAJ,CAAW,GAAX,EAAgBpB,IAAhB,CAAqByB,GAArB,CAAP;AAAA,KAJT;AAKD;AA3BY,C","file":"invoice.controller.js","sourcesContent":["import Invoice from \"../models/invoice.model\";\r\nimport Joi from \"@hapi/joi\";\r\n\r\nconst invoices = [\r\n  { _id: 1, item: \"moh\", qty: 10, date: new Date() },\r\n  { _id: 2, item: \"moha\", qty: 8, date: new Date() },\r\n  { _id: 3, item: \"moham\", qty: 11, date: new Date() },\r\n  { _id: 4, item: \"mohame\", qty: 15, date: new Date() },\r\n  { _id: 5, item: \"mohamed\", qty: 12, date: new Date() }\r\n];\r\n\r\nexport default {\r\n  findAll(req, res, next) {\r\n    res.json(invoices);\r\n  },\r\n\r\n  create(req, res) {\r\n    const schema = Joi.object({\r\n      item: Joi.string()\r\n        .alphanum()\r\n        .min(5)\r\n        .max(150)\r\n        .required(),\r\n      qty: Joi.number().required(),\r\n      date: Joi.date().required(),\r\n      due: Joi.date().required(),\r\n      tax: Joi.number().optional(),\r\n      rate: Joi.number().optional()\r\n    });\r\n\r\n    const { error, value } = schema.validateAsync(req.body, schema);\r\n    if (error && error.details) return res.status(400).json(error);\r\n\r\n    Invoice.create(value)\r\n      .then(invoice => {\r\n        res.status(201).json(invoice);\r\n      })\r\n      .catch(err => res.status(500).json(err));\r\n  }\r\n};\r\n"]}